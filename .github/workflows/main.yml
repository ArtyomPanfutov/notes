on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1                  
  NOTES_APP_ECR_REPOSITORY: notes-app
  NOTES_SERVICE_ECR_REPOSITORY: notes-service
  NGINX_ECR_REPOSITORY: notes-nginx
  ECS_SERVICE: MY_ECS_SERVICE
  ECS_CLUSTER: MY_ECS_CLUSTER                 
  ECS_TASK_DEFINITION: MY_ECS_TASK_DEFINITION 
                                              
  CONTAINER_NAME: MY_CONTAINER_NAME     
  
jobs:
  build-notes-service:
    runs-on: ubuntu-latest
    name: Build Notes Backend Image
    steps:
      - name: Checkout
        uses: actions/checkout@v2.6.0
      - name: Setup Java JDK
        uses: actions/setup-java@v3.9.0
        with:
          java-version: 18
          distribution: adopt
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2
      - name: Clean and prepare
        run: mvn clean mn:dockerfile -Dpackaging=docker
      - name: Maven install (with docker image build)
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: | 
          mvn install -Dpackaging=jar -Ddocker.repository=$ECR_REGISTRY/$NOTES_SERVICE_ECR_REPOSITORY -Ddocker.tag=$IMAGE_TAG
          docker push $ECR_REGISTRY/$NOTES_SERVICE_ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$NOTES_SERVICE_ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
  build-notes-app:
    runs-on: ubuntu-latest
    name: Build Notes App Image
    steps:
      - name: Checkout
        uses: actions/checkout@v2.6.0
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}   
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2
      - name: Create Env
        run: echo -e "REACT_APP_API_URL=$REACT_APP_API_URL
          \nREACT_APP_AUTH0_AUDIENCE=$REACT_APP_AUTH0_AUDIENCE
          \nREACT_APP_AUTH0_CALLBACK_URL=$REACT_APP_AUTH0_CALLBACK_URL
          \nREACT_APP_AUTH0_CLIENT_ID=$REACT_APP_AUTH0_CLIENT_ID
          \nREACT_APP_AUTH0_DOMAIN=$REACT_APP_AUTH0_DOMAIN" >> ./webclient/notes-storage-app/.env
        env: 
          REACT_APP_API_URL: ${{ secrets.APP_API_URL }}
          REACT_APP_AUTH0_AUDIENCE: ${{ secrets.AUTH0_AUDIENCE }}
          REACT_APP_AUTH0_CALLBACK_URL: ${{ secrets.AUTH0_CALLBACK_URL }}
          REACT_APP_AUTH0_CLIENT_ID: ${{ secrets.AUTH0_CLIENT_ID }}
          REACT_APP_AUTH0_DOMAIN:  ${{ secrets.AUTH0_DOMAIN }}    
      - name: Build Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$NOTES_APP_ECR_REPOSITORY:$IMAGE_TAG ./webclient/notes-storage-app
          docker push $ECR_REGISTRY/$NOTES_APP_ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$NOTES_APP_ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
